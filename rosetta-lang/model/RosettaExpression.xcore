@Ecore(nsURI="http://www.rosetta-model.com/RosettaExpression")
@GenModel(fileExtensions="rosetta", modelDirectory="/com.regnosys.rosetta/emf-gen/main/java", operationReflection="false",
	copyrightText="Copyright (c) REGnosys 2017 (www.regnosys.com)", forceOverwrite="true", updateClasspath="false",
	complianceLevel="8.0", bundleManifest="false", modelPluginID="")

package com.regnosys.rosetta.rosetta.expression

import java.util.regex.Pattern

import com.regnosys.rosetta.rosetta.RosettaEnumeration
import com.regnosys.rosetta.rosetta.RosettaNamed
import com.regnosys.rosetta.rosetta.RosettaSymbol
import com.regnosys.rosetta.rosetta.RosettaFeature
import com.regnosys.rosetta.rosetta.RosettaCallableWithArgs
import com.regnosys.rosetta.rosetta.RosettaMapTestExpression
import com.regnosys.rosetta.rosetta.RosettaTyped
import com.regnosys.rosetta.rosetta.simple.Attribute
import org.eclipse.emf.common.util.BasicEList
import com.regnosys.rosetta.rosetta.interpreter.RosettaInterpreterValue
import com.regnosys.rosetta.rosetta.interpreter.InterpreterVisitor

import com.regnosys.rosetta.rosetta.interpreter.RosettaInterpreterBaseEnvironment


interface RosettaExpression {
	// Whether the expression was generated
	boolean generated
	op RosettaInterpreterValue accept(InterpreterVisitor v)
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment env)
}

/**
 * An object that may get an implicit variable generated as input.
 */
interface HasGeneratedInput {
	boolean generatedInputWasSet
	
	op RosettaExpression getInput()
	op void setGeneratedInputIfAbsent(RosettaExpression e)
	op boolean needsGeneratedInput()
}

/**
 * Literals
 */

interface RosettaLiteral extends RosettaExpression, RosettaMapTestExpression {
	op Object containedValue()

	op String stringValue()
}

class RosettaBooleanLiteral extends RosettaLiteral {
	boolean value
	
	op Object containedValue() {
		return isValue
	}
	op String stringValue() {
		return Boolean.toString(value)
	}
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaStringLiteral extends RosettaLiteral {
	String value
	
	op Object containedValue() {
		return value
	}
	op String stringValue() {
		return '"' + value + '"'
	}
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaNumberLiteral extends RosettaLiteral {
	BigDecimal value
	
	op Object containedValue() {
		return value
	}
	op String stringValue() {
		return value.toPlainString
	}
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaIntLiteral extends RosettaLiteral {
	BigInteger value
	
	op Object containedValue() {
		return value
	}
	op String stringValue() {
		return value.toString
	}
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

// Not supported - see issue https://github.com/finos/rune-dsl/issues/524
type Pattern wraps Pattern
class RosettaPatternLiteral extends RosettaLiteral {
	Pattern value
	
	op Object containedValue() {
		return value
	}
	op String stringValue() {
		return '/' + value.toString() + '/'
	}
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

/*
 * List construction
 */

class ListLiteral extends RosettaExpression {
	contains RosettaExpression[] elements
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

/*
 * Variables, projections, conditionals, function calls and constructors
 */

abstract class RosettaReference extends RosettaExpression {
}

class RosettaSymbolReference extends RosettaReference {
	refers RosettaSymbol symbol
	
	boolean explicitArguments
	contains RosettaExpression[] rawArgs
	
	boolean implicitVariableIsInContext
	contains RosettaExpression implicitArgument
	
	op RosettaExpression[] getArgs() {
		if (!explicitArguments && implicitVariableIsInContext && symbol instanceof RosettaCallableWithArgs && (symbol as RosettaCallableWithArgs).numberOfParameters == 1) {
			if (implicitArgument === null) {
				val def = ExpressionFactory.eINSTANCE.createRosettaImplicitVariable();
				def.setName("item");
				def.setGenerated(true);
				implicitArgument = def
			}
			return new BasicEList(#[implicitArgument])
		}
		return rawArgs
	}
	
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this, nv)
	}
}

class RosettaImplicitVariable extends RosettaReference, RosettaNamed {
}

class RosettaFeatureCall extends RosettaExpression {
	contains RosettaExpression receiver
	refers RosettaFeature feature
	
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaConditionalExpression extends RosettaExpression {
	contains RosettaExpression ^if
	contains RosettaExpression ifthen
	contains RosettaExpression elsethen
	
	boolean full // whether the conditional expression has an explicit `else` branch.
	
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaConstructorExpression extends RosettaExpression, RosettaTyped {
	contains ConstructorKeyValuePair[] values
	boolean implicitEmpty
	
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class ConstructorKeyValuePair {
	refers RosettaFeature key
	contains RosettaExpression value
}

interface RosettaOperation extends RosettaExpression {
	String operator
}
/**
 * Binary operations
 */
interface RosettaBinaryOperation extends RosettaOperation, HasGeneratedInput {
	contains RosettaExpression left
	contains RosettaExpression right
	
	op RosettaExpression getInput() {
		left
	}
	op void setGeneratedInputIfAbsent(RosettaExpression e) {
		if (e === null) {
			if (generatedInputWasSet) {
				left = null
				generatedInputWasSet = false
			}
		} else {
			if (!generatedInputWasSet) {
				left = e
				generatedInputWasSet = true
			}
		}
	}
	op boolean needsGeneratedInput() {
		left === null
	}
}

class ArithmeticOperation extends RosettaBinaryOperation {
	
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class LogicalOperation extends RosettaBinaryOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

enum CardinalityModifier {
	NONE as "none",
	ALL as "all",
	ANY as "any"
}

interface ModifiableBinaryOperation extends RosettaBinaryOperation {
	CardinalityModifier cardMod
}

class EqualityOperation extends ModifiableBinaryOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class ComparisonOperation extends ModifiableBinaryOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
	
}

class RosettaContainsExpression extends RosettaBinaryOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaDisjointExpression extends RosettaBinaryOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class JoinOperation extends RosettaBinaryOperation {
	boolean explicitSeparator
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

/**
 * Only exists checks
 */

class RosettaOnlyExistsExpression extends RosettaExpression {
	contains RosettaExpression[] args
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

/**
 * Unary operations
 */

interface RosettaUnaryOperation extends RosettaOperation, HasGeneratedInput {
	contains RosettaExpression argument
	
	op RosettaExpression getInput() {
		argument
	}
	op void setGeneratedInputIfAbsent(RosettaExpression e) {
		if (e === null) {
			if (generatedInputWasSet) {
				argument = null
				generatedInputWasSet = false
			}
		} else {
			if (!generatedInputWasSet) {
				argument = e
				generatedInputWasSet = true
			}
		}
	}
	op boolean needsGeneratedInput() {
		argument === null
	}
}

interface ListOperation extends RosettaUnaryOperation {
}

interface CanHandleListOfLists extends RosettaUnaryOperation {
}

enum ExistsModifier {
	NONE,
	SINGLE,
	MULTIPLE
}


class RosettaExistsExpression extends RosettaUnaryOperation {
    ExistsModifier modifier
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaAbsentExpression extends RosettaUnaryOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaOnlyElement extends ListOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class RosettaCountOperation extends RosettaUnaryOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class FlattenOperation extends ListOperation, CanHandleListOfLists {
}

class DistinctOperation extends ListOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this, nv)
	}
}

class ReverseOperation extends ListOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this, nv)
	}
}

class FirstOperation extends ListOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class LastOperation extends ListOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class SumOperation extends ListOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this, nv)
	}
}

class AsKeyOperation extends RosettaUnaryOperation {
}

class OneOfOperation extends RosettaUnaryOperation {
}

enum Necessity {
	optional, required
}

class ChoiceOperation extends RosettaUnaryOperation {
	Necessity necessity
	refers Attribute[] attributes
}

class ToStringOperation extends RosettaUnaryOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

interface ParseOperation extends RosettaUnaryOperation {
}

class ToNumberOperation extends ParseOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class ToIntOperation extends ParseOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class ToTimeOperation extends ParseOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class ToEnumOperation extends ParseOperation {
	refers RosettaEnumeration enumeration 
	
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class ToDateOperation extends ParseOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class ToDateTimeOperation extends ParseOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

class ToZonedDateTimeOperation extends ParseOperation {
	op RosettaInterpreterValue accept(InterpreterVisitor v, RosettaInterpreterBaseEnvironment nv) {
		v.interp(this,nv)
	}
}

/**
 * Functional operations
 */

class ClosureParameter extends RosettaSymbol {
	container InlineFunction function opposite parameters
}

class InlineFunction {
	contains ClosureParameter[] parameters opposite function
	contains RosettaExpression body
}

interface RosettaFunctionalOperation extends RosettaUnaryOperation {
	contains InlineFunction function
}

interface MandatoryFunctionalOperation extends RosettaFunctionalOperation {
}

interface UnaryFunctionalOperation extends RosettaFunctionalOperation {
}

class ReduceOperation extends MandatoryFunctionalOperation, ListOperation {
}

class FilterOperation extends MandatoryFunctionalOperation, UnaryFunctionalOperation, CanHandleListOfLists {
}

class MapOperation extends MandatoryFunctionalOperation, UnaryFunctionalOperation, CanHandleListOfLists {
}

class ThenOperation extends MandatoryFunctionalOperation, UnaryFunctionalOperation, CanHandleListOfLists {
}

interface ComparingFunctionalOperation extends RosettaFunctionalOperation, UnaryFunctionalOperation {
}

class SortOperation extends ComparingFunctionalOperation, ListOperation {
}

class MinOperation extends ComparingFunctionalOperation, ListOperation {
}

class MaxOperation extends ComparingFunctionalOperation, ListOperation {
}

